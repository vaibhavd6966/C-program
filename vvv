#include <stdio.h>
#include <stdbool.h>

#define MAX 100

struct Process {
    int id;
    int arrivalTime;
    int burstTime;
    int remainingTime;
};

void preemptiveSJF(struct Process proc[], int n) {
    int completed = 0, currentTime = 0;
    int waitingTime[MAX] = {0}, turnaroundTime[MAX] = {0};
    
    printf("\nPreemptive SJF Scheduling:\n");
    printf("Gantt Chart: ");

    while (completed < n) {
        int idx = -1;
        int minRemainingTime = 9999;

        for (int i = 0; i < n; i++) {
            if (proc[i].arrivalTime <= currentTime && proc[i].remainingTime > 0 && proc[i].remainingTime < minRemainingTime) {
                minRemainingTime = proc[i].remainingTime;
                idx = i;
            }
        }

        if (idx != -1) {
            printf("P%d ", proc[idx].id);
            proc[idx].remainingTime--;
            currentTime++;

            if (proc[idx].remainingTime == 0) {
                completed++;
                turnaroundTime[idx] = currentTime - proc[idx].arrivalTime;
                waitingTime[idx] = turnaroundTime[idx] - proc[idx].burstTime;
            }
        } else {
            printf("| ");
            currentTime++;
        }
    }

    printf("\n");

    printf("\nProcess ID\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\n", proc[i].id, waitingTime[i], turnaroundTime[i]);
    }
}

void roundRobin(struct Process proc[], int n, int quantum) {
    int remainingTime[MAX];
    for (int i = 0; i < n; i++) {
        remainingTime[i] = proc[i].burstTime;
    }

    int currentTime = 0, completed = 0;
    int waitingTime[MAX] = {0}, turnaroundTime[MAX] = {0};

    printf("\nRound Robin Scheduling (Quantum = %d):\n", quantum);
    printf("Gantt Chart: ");

    while (completed < n) {
        bool done = false;
        for (int i = 0; i < n; i++) {
            if (proc[i].arrivalTime <= currentTime && remainingTime[i] > 0) {
                done = true;
                if (remainingTime[i] > quantum) {
                    printf("P%d ", proc[i].id);
                    currentTime += quantum;
                    remainingTime[i] -= quantum;
                } else {
                    printf("P%d ", proc[i].id);
                    currentTime += remainingTime[i];
                    waitingTime[i] = currentTime - proc[i].arrivalTime - proc[i].burstTime;
                    remainingTime[i] = 0;
                    completed++;
                    turnaroundTime[i] = waitingTime[i] + proc[i].burstTime;
                }
            }
        }
        if (!done) {
            printf("| ");
            currentTime++;
        }
    }

    printf("\n");

    printf("\nProcess ID\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\n", proc[i].id, waitingTime[i], turnaroundTime[i]);
    }
}

int main() {
    int n, quantum;
    struct Process proc[MAX];

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        proc[i].id = i + 1;
        printf("Enter arrival time for process %d: ", proc[i].id);
        scanf("%d", &proc[i].arrivalTime);
        printf("Enter burst time for process %d: ", proc[i].id);
        scanf("%d", &proc[i].burstTime);
        proc[i].remainingTime = proc[i].burstTime;
    }

    preemptiveSJF(proc, n);

    printf("Enter time quantum for Round Robin: ");
    scanf("%d", &quantum);

    roundRobin(proc, n, quantum);

    return 0;
}
  
